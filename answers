CMPUT 313
Assignment 1

Part 1:
1.
The basic data types that are not structs or enums are the following.
CnetAddr
CnetColour
CnetData
CnetRandom
CnetTime
CnetTimerID

An int on the lab machine is 4 bytes/32 bits.
The only 32 bit integers in the above types are the CnetAddr and CnetTimerID.
All others are either void pointers, char pointers, input vars pointer or 64 bit ints.

2.
The node time is stored in the nodeinfo.time_in_usec variable.
You can print this variable using printf:

printf("Node time is %lld", nodeinfo.time_in_usec);

3.
You are able to specify minimum and maximum message sizes, however cnet.h does not specify
the content/format of the messages sent.

4.
By enveloping cnet library calls in a check statement, if an error occurs you can get the source file, line number and nodename of where the error occured. 

Since the check macro auto exits on failure the easiest way to continue execution but get the error information is to test the return value of each library function, if the return value does not equal zero it indicates an error occured. To find information on the error you can index into the cnet_errstr array using the global cnet_errno which each library function sets on errors.

printf("The error message was: %s", cnet_errstr[cnet_errno]);

You could also use the CNET_perror(char *prefix) function after checking if a library function returned with errors. This function prints the last error message with a user supplied prefix.

5.
It will happen whenever the message len is not of size MAX_MESSAGE_SIZE.
Furthermore, depending on the bit packing and MAX_MESSAGE_SIZE its possible that even if len matched 
the MAX_MESSAGE_SIZE they would still not be equal.

6.
Yes. f.checksum is set prior to sending by the CNET_ccitt function.
f.checksum = CNET_ccitt((unsigned char *)&f, (int)length);

The physical_ready handler checks that the checksum is correct with the
same function used to determine the checksum on sending.
CNET_ccitt((unsigned char *)&f, (int)len) != checksum)
if correct the handler goes on to write the frame to the application layer. 
If the checksum is bad the frame is thrown out.

7.
When data is transmitted in the transmit_frame handler a timer is started with
lasttimer = CNET_start_timer(EV_TIMER1, 3 * timeout, 0);

Once a data frame is read in the physical_ready handler the following code stops the timer.
CNET_stop_timer(lasttimer);

PART 2
Program Report:
Design Overview:
The program makes use of 2 handlers physical_ready and application_ready.
When the application_ready handler is invoked the handler reads the application layer and then writes the message to the physical layer.
When the physical_ready handler is invoked a check is made to ensure only node 200 (the server node) reads the physical layer.
All other nodes should not read the phsyical layer since no messages are sent to them (accomplished by using the CNET_enable_application(200).
If the node is address 200 it reads the physical layer and writes the message to the application layer.

Program Status:
The program works when running cnet <topology_file>.
I assumed the server needed to determine which link to read messages from so I passed in a fixed integer to read_physical. This caused errors.
Initially all nodes sent messages to all other nodes. This had to be fixed by specifying the destination node address in enable_application.
I orignally specified the link to write_physical to as 0 thinking they would be 0 indexed however they are indexed from 1 starting with the links specified in the topology file.
Once these problems were corrected the program worked as expected with all the topology files.

Findings:
1.
After running several trials, the number of messages delivered does not vary significantly with increased bandwidth.

The reason this occurs is that the message rate of the clients is not high enough to exhaust the bandwidth of each link is high enough to deliver the messages at the rate they are generated. The link is akin to a pipe carrying water, but that is never at full capacity. Increasing the pipe size does not increase the rate at which the water flows unless the amount of water being put in the pipe is larger than the the pipe is able to hold. 

If our message rate increases and attempts to place more messages onto the link than its cappacity can absorb then an increased bandwidth would help deliver messages faster.

2.
The server gets an error on the CNET_write_application command.
The error reported is ER_MISSINGMSG. 

3.
The server gets an error on the CNET_write_application command.
The error reported is ER_MISSINGMSG. 


Acknowledgements:
Direction provided by TA's and the CNET documentation.
